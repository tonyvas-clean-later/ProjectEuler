package com.company;

import java.util.Date;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        final int PROBLEMS_AVAILABLE = 9;
        Scanner scan = new Scanner(System.in);
        boolean didExit = false;

        while (!didExit){
            System.out.println("Project Euler Problems");
            System.out.println("Select Which Problem to Run");
            System.out.println("0. Exit");
            System.out.println("1. Multiples of 3 And 5");
            System.out.println("2. Even Fibonacci Numbers");
            System.out.println("3. Largest Prime Factor");
            System.out.println("4. Largest Palindrome Product");
            System.out.println("5. Smallest Multiple");
            System.out.println("6. Sum Square Difference");
            System.out.println("7. 10001st Prime");
            System.out.println("8. Largest Product in a Series");
            System.out.println("9. Special Pythagorean Triplet");

            String inputStr = scan.nextLine();
            int inputInt = -1;
            boolean isInt;

            try{
                inputInt = Integer.parseInt(inputStr);
                isInt = true;
            }catch (Exception e){
                isInt = false;
            }

            if (isInt){
                if (inputInt == 0)
                    didExit = true;
                else if (inputInt > 0 && inputInt <= PROBLEMS_AVAILABLE){
                    System.out.print("Answer: ");
                    Date startDate = new Date();
                    switch (inputInt){
                        case 1:
                            System.out.println(multiplesOf3And5());
                            break;
                        case 2:
                            System.out.println(evenFibonacciNumbers());
                            break;
                        case 3:
                            System.out.println(largestPrimeFactor());
                            break;
                        case 4:
                            System.out.println(largestPalindromeProduct());
                            break;
                        case 5:
                            System.out.println(smallestMultiple());
                            break;
                        case 6:
                            System.out.println(sumSquareDifference());
                            break;
                        case 7:
                            System.out.println(xthPrimeNumber());
                            break;
                        case 8:
                            System.out.println(largestProductInASeries());
                            break;
                        case 9:
                            System.out.println(specialPythagoreanTriplet());
                            break;
                    }
                    Date endDate = new Date();
                    System.out.println("Calculated in " + (endDate.getTime() - startDate.getTime()) + "ms");
                }
                else
                    System.err.println("Error: Input Out Of Range");
            }
            else{
                System.err.println("Error: Invalid Input Format");
            }
        }
    }

    public static int multiplesOf3And5(){
        //If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
        //The sum of these multiples is 23.
        //Find the sum of all the multiples of 3 or 5 below 1000

        final int[] FACTORS = new int[] {3, 5};
        final int MAX_VALUE = 1000;

        int sum = 0;
        for (int num = 0; num < MAX_VALUE; num++){
            for (int i = 0; i < FACTORS.length; i++){
                if (num % FACTORS[i] == 0){
                    sum += num;
                    break;
                }
            }
        }
        return sum;
    }

    public static int evenFibonacciNumbers(){
        //Each new term in the Fibonacci sequence is generated by adding the previous two terms.
        //By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        //By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

        final int MAX_VALUE = 4000000;
        boolean isDone = false;
        int previousNum = 1;
        int currentNum = 2;
        int sum = 0;

        while (!isDone){
            if (currentNum <= MAX_VALUE){
                if (currentNum % 2 == 0){
                    sum += currentNum;
                }
                int temp = previousNum;
                previousNum = currentNum;
                currentNum += temp;
            }
            else
                isDone = true;
        }

        return sum;
    }

    public static long largestPrimeFactor(){
        //The prime factors of 13195 are 5, 7, 13 and 29.
        //What is the largest prime factor of the number 600851475143?

        final long NUMBER_TO_CHECK = 600851475143L;
//        for (long factor = NUMBER_TO_CHECK; factor > 0; factor--){
//            if (NUMBER_TO_CHECK % factor == 0){
//                if (isPrime(factor)){
//                    return factor;
//                }
//            }
//        }
        for (long firstFactor = 2; firstFactor <= NUMBER_TO_CHECK; firstFactor++){
            if (NUMBER_TO_CHECK % firstFactor == 0){
                long secondFactor = NUMBER_TO_CHECK / firstFactor;
                if (isPrime(secondFactor))
                    return secondFactor;
            }
        }
        return 1;
    }

    public static boolean isPrime(long num){
        for (long i = 2; i * i <= num; i++){
            if (num % i == 0){
                return false;
            }
        }
        return true;
    }

    public static int largestPalindromeProduct(){
        //A palindromic number reads the same both ways.
        //The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
        //Find the largest palindrome made from the product of two 3-digit numbers.
        final int MIN = 100;
        final int MAX = 999;
        int largest = -1;

        for (int i = MAX; i >= MIN; i--){
            for (int j = MAX; j >= MIN; j--){
                int product = i * j;
                if (isPalindrome(product)){
                    if (product > largest)
                        largest = product;
                }
            }
        }

        return largest;
    }

    public static boolean isPalindrome(int num){
        String numStr = Integer.toString(num);

        int j = numStr.length() - 1;
        for (int i = 0; i < numStr.length();){
            if (numStr.charAt(i) != numStr.charAt(j))
                return false;
            i++;
            j--;
        }

        return true;
    }

    public static int smallestMultiple(){
        //2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
        //What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

        final int MIN = 1;
        final int MAX = 20;

        for (int num = MAX;; num++){
            boolean isDivisibleByAll = true;
            for (int factor = MIN; factor < MAX; factor++){
                if (num % factor != 0){
                    isDivisibleByAll = false;
                    break;
                }
            }

            if (isDivisibleByAll)
                return num;
        }
    }

    public static int sumSquareDifference(){
        //The sum of the squares of the first ten natural numbers is 1^2+2^2+...+10^2=385
        //The square of the sum of the first ten natural numbers is (1+2+...+10)^2=55^2=3025
        //Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025−385=2640.
        //Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

        final int MIN = 1;
        final int MAX = 100;
        int sumOfSquares = 0;
        int sum = 0;
        int squareOfTheSum = 0;

        for (int i = MIN; i <= MAX; i++){
            sumOfSquares += (i * i);
            sum += i;
        }
        squareOfTheSum = (sum * sum);

        return squareOfTheSum - sumOfSquares;
    }

    public static int xthPrimeNumber(){
        //By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
        //What is the 10 001st prime number?

        final int MAX_COUNT = 10001;
        int count = 0;
        for (int i = 2;; i++){
            if (isPrime(i))
                count++;
            if (count == MAX_COUNT)
                return i;
        }
    }

    public static long largestProductInASeries(){
        //The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
        //73167176531330624919225119674426574742355349194934
        //96983520312774506326239578318016984801869478851843
        //85861560789112949495459501737958331952853208805511
        //12540698747158523863050715693290963295227443043557
        //66896648950445244523161731856403098711121722383113
        //62229893423380308135336276614282806444486645238749
        //30358907296290491560440772390713810515859307960866
        //70172427121883998797908792274921901699720888093776
        //65727333001053367881220235421809751254540594752243
        //52584907711670556013604839586446706324415722155397
        //53697817977846174064955149290862569321978468622482
        //83972241375657056057490261407972968652414535100474
        //82166370484403199890008895243450658541227588666881
        //16427171479924442928230863465674813919123162824586
        //17866458359124566529476545682848912883142607690042
        //24219022671055626321111109370544217506941658960408
        //07198403850962455444362981230987879927244284909188
        //84580156166097919133875499200524063689912560717606
        //05886116467109405077541002256983155200055935729725
        //71636269561882670428252483600823257530420752963450
        //Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
        // What is the value of this product?

        final String SERIES =
                "73167176531330624919225119674426574742355349194934" +
                "96983520312774506326239578318016984801869478851843" +
                "85861560789112949495459501737958331952853208805511" +
                "12540698747158523863050715693290963295227443043557" +
                "66896648950445244523161731856403098711121722383113" +
                "62229893423380308135336276614282806444486645238749" +
                "30358907296290491560440772390713810515859307960866" +
                "70172427121883998797908792274921901699720888093776" +
                "65727333001053367881220235421809751254540594752243" +
                "52584907711670556013604839586446706324415722155397" +
                "53697817977846174064955149290862569321978468622482" +
                "83972241375657056057490261407972968652414535100474" +
                "82166370484403199890008895243450658541227588666881" +
                "16427171479924442928230863465674813919123162824586" +
                "17866458359124566529476545682848912883142607690042" +
                "24219022671055626321111109370544217506941658960408" +
                "07198403850962455444362981230987879927244284909188" +
                "84580156166097919133875499200524063689912560717606" +
                "05886116467109405077541002256983155200055935729725" +
                "71636269561882670428252483600823257530420752963450";
        final int NUM_ADJACENT_DIGITS = 13;
        long highestProduct = 0;

        for (int i = 0; i < SERIES.length() - NUM_ADJACENT_DIGITS + 1; i++){
            String subStr = SERIES.substring(i, i + NUM_ADJACENT_DIGITS);
            if (!subStr.contains("0")){
                long product = 1;

                for (int j = 0; j < subStr.length(); j++){
                    product *= (subStr.charAt(j) - '0');
                }

                if (product > highestProduct)
                    highestProduct = product;
            }
        }

        return highestProduct;
    }

    public static int specialPythagoreanTriplet(){
        //A Pythagorean triplet is a set of three natural numbers, a < b < c, for which, a^2 + b^2 = c^2
        //For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
        //There exists exactly one Pythagorean triplet for which a + b + c = 1000.
        //Find the product abc.

        final int SUM_OF_TRIPLET_VALUES = 1000;

        for (int a = 1; a < SUM_OF_TRIPLET_VALUES; a++){
            for (int b = 1; b < SUM_OF_TRIPLET_VALUES; b++){
                double c = Math.sqrt((a * a) + (b * b));
                if (a + b + c == SUM_OF_TRIPLET_VALUES){
                    return (int)(a * b * c);
                }
            }
        }

        return -1;
    }
}
